#!/bin/sh


#===============================================================================
# relay a local video to a named pipe
#===============================================================================


#===============================================================================
# script usage
#===============================================================================

usage () {
# if argument passed to function echo it
[ -z "${1}" ] || echo "! ${1}"
# display help
echo "\
$(basename "$0") -i url -s 00:00:00 -t 00:00:00"
exit 2
}


#===============================================================================
# error messages
#===============================================================================

INVALID_OPT_ERR='Invalid option:'
REQ_ARG_ERR='requires an argument'
WRONG_ARGS_ERR='wrong number of arguments passed to script'


#===============================================================================
# check number of aruments passed to script
#===============================================================================

[ $# -gt 0 ] || usage "${WRONG_ARGS_ERR}"


#===============================================================================
# getopts check options passed to script
#===============================================================================

while getopts ':s:i:t:h' opt
do
  case ${opt} in
     s) start="${OPTARG}";;
     i) input="${OPTARG}";;
     t) end="${OPTARG}";;
     h) usage;;
     \?) usage "${INVALID_OPT_ERR} ${OPTARG}" 1>&2;;
     :) usage "${INVALID_OPT_ERR} ${OPTARG} ${REQ_ARG_ERR}" 1>&2;;
  esac
done
shift $((OPTIND-1))


#===============================================================================
# named pipe
#===============================================================================

# check if the /tmp/relay named pipe exist otherwise create it
[ -p /tmp/relay ] || mkfifo /tmp/relay


#===============================================================================
# one stream containing audio and video
#===============================================================================

# copy audio and video streams
one_stream () {
ffmpeg \
-hide_banner \
-y \
-i "${input}" \
-c:a copy -c:v copy \
-tune zerolatency \
-f matroska /tmp/relay
}


# trim video and re-encode
one_stream_trim () {
ffmpeg \
-hide_banner \
-y \
-ss "${start}" \
-i "${input}" \
-t "${end}" \
-c:a aac \
-c:v libx264 -profile:v high \
-tune zerolatency \
-f matroska /tmp/relay
}



#===============================================================================
# case statement check for number of streams
#===============================================================================

if [ -z "${start}" ]; then
    one_stream
else
    one_stream_trim
fi    
