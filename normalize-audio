#!/bin/sh

# normalize audio levels

# script usage
script_usage=$(printf "%s\n" "$(basename "$0") -i infile.(wav|mp3|m4a)")

# outfile file recording destination
audio_out="$HOME/Desktop/audio-$(date +"%Y-%m-%d-%H-%M-%S").wav"

# check arguments passed to script
if [ $# -eq 2 ]; then
   # group commands
   {
   [ "$1" = '-i' ] && \
   [ -f "$2" ]
   } || { printf "%s\n" "$script_usage" && exit; }
else
   { printf "%s\n" "$script_usage" && exit; }
fi

# infile = audio or video file
infile="$2" 

# print analyzing file
printf "%s\n" '+ Analyzing file with ffmpeg'

# ffmpeg loudnorm get stats from file
normalize=$(ffmpeg \
-hide_banner \
-i "$infile" \
-af "loudnorm=I=-16:dual_mono=true:TP=-1.5:LRA=11:print_format=json" \
-f null - 2>&1 | tail -n 12)

# use awk to extract the stats from the normalize command
measured_I=$(printf "%s\n" "$normalize" | awk -F'"' '/input_i/ {print $4}')
measured_TP=$(printf "%s\n" "$normalize" | awk -F'"' '/input_tp/ {print $4}')
measured_LRA=$(printf "%s\n" "$normalize" | awk -F'"' '/input_lra/ {print $4}')
measured_thresh=$(printf "%s\n" "$normalize" | awk -F'"' '/input_thresh/ {print $4}')
offset=$(printf "%s\n" "$normalize" | awk -F'"' '/target_offset/ {print $4}')

# audio function
audio () {
ffmpeg \
-hide_banner \
-i "$infile" \
-filter_complex \
"loudnorm=I=-16:
TP=-1.5:
LRA=11:
measured_I=${measured_I}:
measured_LRA=${measured_LRA}:
measured_TP=${measured_TP}:
measured_thresh=${measured_thresh}:
offset=${offset}:
linear=true:
print_format=summary [audio]" \
-map "[audio]" \
-ar 44.1k "$audio_out"
}

# grep the file extension of the infile to see if its and audio or video file
filetype=$(printf "%s\n" "$infile" | grep -Eo '.(wav|mp3|m4a|mp4|mov|mkv)$')

# run the audio or video function based on the file extension
case "$filetype" in
  .wav|.mp3|.m4a) audio "$infile";;
  *) printf "%s\n" 'These arent the Droids your looking for';;
esac

